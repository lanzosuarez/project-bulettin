#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bulletin:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




/*
* socket io
*/



const template = {
  stats: [
    { name: 'Jan', visitors: 0, inquiries: 0 },
    { name: 'Feb', visitors: 0, inquiries: 0 },
    { name: 'Mar', visitors: 0, inquiries: 0 },
    { name: 'Apr', visitors: 0, inquiries: 0 },
    { name: 'May', visitors: 0, inquiries: 0 },
    { name: 'Jun', visitors: 0, inquiries: 0 },
    { name: 'Jul', visitors: 0, inquiries: 0 },
    { name: 'Aug', visitors: 0, inquiries: 0 },
    { name: 'Sep', visitors: 0, inquiries: 0 },
    { name: 'Oct', visitors: 0, inquiries: 0 },
    { name: 'Nov', visitors: 0, inquiries: 0 },
    { name: 'Dec', visitors: 0, inquiries: 0 }
  ],
}

const moment = require('moment'),
  _ = require('lodash');

let admin,
  messages = [],
  users = [],
  io = require('socket.io')(server);

const onJoin = (user,socket) => {
  console.log(user.nickname + " has connected!");
  if (user.nickname === "admin" && user.password) { //check if admin
    admin = socket;
    socket.nickname = user.nickname;
    console.log("on emite stats");
    console.log(template);
    io.emit('stats', template); 
    io.emit('admin-online', true); //then broadcast tat admin is online
  } else {
    socket.nickname = user.nickname;
  }
  if (messages.length > 110) {
    _.drop(messages, 10)
  }
  if (admin) {
    console.log("emit online");
    io.emit('admin-online', true);
  } else {
    io.emit('admin-online', false);
  }
  socket.emit('all-messages', messages);
  console.log("messages", messages);
};

const msgFromUser = (data,socket) => {
  if(data.nickname!=="admin"){
    //add to inquiries
    setStats(0,1);
  }
  let toSend = {
    nickname: socket.nickname,
    message: data.message,
    seen: false,
    sendDate: moment().format('LT'),
    seenDate: null,
    url: data.url
  };
  console.log(toSend);
  messages.push(toSend);
  io.emit('message-from-server', toSend);
};

const onSeenAll = (socket) => {
  console.log("on seen all");
  if (socket.nickname === "admin") {
    messages.map(msg => {
      if (msg.nickname !== "admin") {
        if (!msg.seen) {
          msg.seen = true;
          msg.seenDate = moment().format('LT');
        }
      }
    })
  } else {
    messages.map(msg => {
      if (msg.nickname !== socket.nickname && msg.nickname === "admin") {
        if (!msg.seen) {
          msg.seen = true;
          msg.seenDate = moment().format('LT')
        }
      }
    });
  }
  io.emit('all-messages', messages);
};

const onLogout = (socket) => {
  console.log("onlogout")
  admin.disconnect();
  admin = null;
};

const onDisconnect = (socket) => {
  if (socket.nickname === "admin") {
    io.emit('admin-online', false);
    messages = [];
    io.emit('all-messages', messages);
    console.log(socket.nickname + ' has disconnected');
    return;
  }
  console.log(socket.nickname + ' has disconnected');
};

const onClear = ()=>{
  console.log("on clear");
  messages = [];
}

const findMonth = () => {
  const date = new Date(Date.now());
  return date.getMonth();
};

const setStats = (visit,inquire)=>{
  let month = findMonth();
  console.log(month);
  if(visit){
    console.log("on add visitors");
    template.stats[month].visitors=template.stats[month].visitors+1;
  } else {
    console.log("on add on inquiries");
    template.stats[month].inquiries=template.stats[month].inquiries+1;
  }
}

//MAIN
io.on('connect', socket => {

  setStats(1);//add to visitors
  console.log(template);
  if (admin) {
    console.log("on emite stats");
    io.emit('stats', template); //emit stats;
    io.emit('admin-online', true);
  }
  socket.on('join', user => {
    onJoin(user,socket);
  });
  socket.on('message-from-user', data => {
    msgFromUser(data,socket);
  });
  socket.on('seen-all', () => {
    onSeenAll(socket);
  });
  socket.on('admin-logout', () => {
    onLogout(socket);
  });
  socket.on('clear', () => {
    onClear();
    io.emit('all-messages', messages);
  });
  socket.on('disconnect', () => {
    onDisconnect(socket);
  });
});
