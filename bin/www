#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bulletin:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/*
* socket io
*/
const moment = require('moment');
const _ = require('lodash');
let admin;
let messages = [];
let users = [];
let io = require('socket.io')(server);
io.on('connect', socket => {
  if(admin){
    io.emit('admin-online', true);
  }
  socket.on('join', user => {
    console.log(user.nickname + " has connected!");
    if (user.nickname === "admin" && user.password) { //check if admin
      admin = socket;
      socket.nickname = user.nickname;
      io.emit('admin-online', true); //then broadcast tat admin is online
    } else {
       socket.nickname = user.nickname;
    }
    if (messages.length > 110) {
      _.drop(messages, 10)
    }
    if(admin){
      console.log("emit online");
      io.emit('admin-online', true);
    } else {
      io.emit('admin-online', false);
    }
    socket.emit('all-messages', messages);
    console.log("messages", messages);
  });

  socket.on('message-from-user', data => {
    let toSend = {
      nickname: socket.nickname,
      message: data.message,
      seen: false,
      sendDate: moment().format('LT'),
      seenDate: null,
      url: data.url
    };
    console.log(toSend);
    messages.push(toSend);
    io.emit('message-from-server', toSend);
  });

  socket.on('seen-all', () => {
    console.log("on seen all");
    if(socket.nickname ==="admin"){
      messages.map(msg=>{
          if (msg.nickname !== "admin") {
            if(!msg.seen){
              msg.seen = true;
              msg.seenDate = moment().format('LT');
            }
          }
      })
    } else {
      messages.map(msg => {
      if (msg.nickname !== socket.nickname && msg.nickname==="admin") {
        if (!msg.seen) {
          msg.seen = true;
          msg.seenDate = moment().format('LT')
        }
      }
    });
    }
    io.emit('all-messages', messages);
  });

  socket.on('admin-logout', ()=>{
    console.log("onlogout")
    admin.disconnect();
    admin=null;
  });

  socket.on('clear', ()=>{
    console.log("on clear");
    messages=[];
    io.emit('all-messages', messages);
  });

  socket.on('disconnect', () => {
    if (socket.nickname === "admin") {
      io.emit('admin-online', false);
      messages=[];
      io.emit('all-messages', messages);
      console.log(socket.nickname + ' has disconnected');
      return;
    }
    console.log(socket.nickname + ' has disconnected');
  });
});
